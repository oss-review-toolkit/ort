jobs:
- job: LinuxAnalyzerTest
  pool:
    vmImage: ubuntu-18.04
  steps:
  - task: UsePythonVersion@0
    displayName: Enable Python 3.6
    inputs:
      versionSpec: 3.6
      addToPath: true
      architecture: x64

  # Install required tools.
  - bash: |
      # Install apt packages.
      sudo apt-get -qq install ca-certificates cvs

      # Uninstall mono-devel because it contains the "lc" command which conflicts with BoyterLc.
      sudo apt-get -qq remove mono-devel

      # Install NPM packages.
      sudo npm install -g bower@$BOWER_VERSION

      # Install Python packages.
      pip install --user \
        conan==$CONAN_VERSION \
        pipenv==$PYTHON_PIPENV_VERSION \
        virtualenv==$VIRTUALENV_VERSION
      conan user # Create the conan data directory. Automatic detection of your arch, compiler, etc.

      # Downgrade Rust, because the CargoSubcrateTest fails with the pre-installed version.
      rustup default $RUST_VERSION

      # Install git-repo.
      mkdir -p $HOME/.local/bin
      curl https://storage.googleapis.com/git-repo-downloads/repo > $HOME/.local/bin/repo
      chmod a+x $HOME/.local/bin/repo

      # Install Go Dep (requires the GOBIN directory to already exist).
      mkdir -p $HOME/go/bin
      curl https://raw.githubusercontent.com/golang/dep/v$GO_DEP_VERSION/install.sh | sh

      # Install 'CocoaPods'. As https://github.com/CocoaPods/CocoaPods/pull/10609 is needed but not yet released.
      curl -ksSL https://github.com/CocoaPods/CocoaPods/archive/9461b346aeb8cba6df71fd4e71661688138ec21b.tar.gz | tar -zxC .
      cd CocoaPods-9461b346aeb8cba6df71fd4e71661688138ec21b
      gem build cocoapods.gemspec
      sudo gem install cocoapods-1.10.1.gem

      # Update PATH for next steps, see:
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=bash#prependpath-prepend-a-path-to-the--path-environment-variable
      echo "##vso[task.prependpath]$HOME/.local/bin"
      echo "##vso[task.prependpath]$HOME/go/bin"
    displayName: Install Required Tools

  # Clone repository.
  - checkout: self
    fetchDepth: 1
    submodules: recursive

  # Gradle build cache, see: https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
  - task: Cache@2
    inputs:
      key: '"$(Agent.OS)" | analyzer-test | gradle-caches | v3 | gradle.properties, settings.gradle.kts, **/build.gradle.kts'
      restoreKeys: |
        "$(Agent.OS)" | analyzer-test | gradle-caches | v3
      path: $(GRADLE_USER_HOME)/caches
    displayName: Cache Gradle Caches

  - task: Cache@2
    inputs:
      key: '"$(Agent.OS)" | gradle-wrapper | gradle/wrapper/gradle-wrapper.properties'
      restoreKeys: |
        "$(Agent.OS)" | gradle-wrapper
      path: $(GRADLE_USER_HOME)/wrapper/dists
    displayName: Cache Gradle Wrapper

  - bash: |
      # Create the ORT_DATA_DIR, in case it is not created because the test task is skipped because of the Gradle cache.
      mkdir $ORT_DATA_DIR

      # Export a DAY_OF_YEAR variable to be able to use it as a cache key.
      export DAY_OF_YEAR=$(date '+%j')
      echo "##vso[task.setvariable variable=DAY_OF_YEAR;]$DAY_OF_YEAR"
    displayName: Prepare Caching ORT Data Dir

  # Cache the ORT data directory. There is no file that could be used as a meaningful cache key, so use the day of year
  # instead to make sure the cache is updated once a day.
  - task: Cache@2
    inputs:
      key: '"$(Agent.OS)" | analyzer-test | ort-data | "$(DAY_OF_YEAR)"'
      restoreKeys: |
        "$(Agent.OS)" | analyzer-test | ort-data
      path: $(ORT_DATA_DIR)
    displayName: Cache ORT Data Dir

  # Check requirements.
  # Enable this task to check installed requirements, e.g. after upgrading the required version of a system
  # dependency.
  - task: Gradle@2
    displayName: Check requirements
    continueOnError: true
    enabled: true # TODO: Make this a Pipeline parameter to be able to activate it in the UI.
    inputs:
      gradleWrapperFile: gradlew
      options: --no-daemon -x reporter-web-app:yarnBuild --scan
      tasks: 'cli:run --args="requirements"'
      javaHomeOption: JDKVersion
      jdkVersionOption: 1.11
      gradleOptions: -Xmx4096m

  # Build and test.
  - task: Gradle@2
    displayName: Run Tests
    inputs:
      gradleWrapperFile: gradlew
      # TODO: Only exclude ExpensiveTag on PR builds.
      options: --no-daemon --stacktrace -x reporter-web-app:yarnBuild -Dkotest.tags.exclude=ExpensiveTag -Dkotest.assertions.multi-line-diff=simple -PbuildCacheRetentionDays=3
      tasks: analyzer:test analyzer:funTest jacocoReport
      publishJUnitResults: true
      testResultsFiles: '**/flattened/TEST-*.xml'
      testRunTitle: $(Agent.JobName)
      # TODO: Configure code coverage options.
      #codeCoverageToolOption: 'JaCoCo'
      #codeCoverageClassFilter: '' # TODO: Define filters if required, e.g. '+:com.,+:org.,-:my.app*.*.'.
      javaHomeOption: JDKVersion
      jdkVersionOption: 1.11
      gradleOptions: -Xmx8192m

  # Clean disk space before caching starts, otherwise the disk might run full.
  - task: Gradle@2
    displayName: Gradle Clean
    inputs:
      gradleWrapperFile: gradlew
      options: --no-daemon
      tasks: clean
      javaHomeOption: JDKVersion
      jdkVersionOption: 1.11

  # Ensure that any running Gradle daemon is stopped before caching starts.
  - bash: ./gradlew --stop
    displayName: Stop Gradle Daemon

  - bash: |
      curl -Os https://uploader.codecov.io/latest/linux/codecov
      chmod +x codecov
      ./codecov -X gcov -f '!*/src/*/assets/*';
    displayName: Upload to codecov.io
    condition: eq(variables['Build.Reason'], 'Schedule')
