jobs:
- job: WindowsAnalyzerTest
  pool:
    # See https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md.
    vmImage: windows-2019
  steps:
  - task: UsePythonVersion@0
    displayName: Enable Python 3.6
    inputs:
      versionSpec: 3.6
      addToPath: true
      architecture: x64

  # Install required tools.
  - pwsh: |
      # Install Chocolatey packages.
      cinst dep --version $env:GO_DEP_VERSION -y --no-progress
      cinst haskell-stack --version $env:STACK_VERSION -y --no-progress
      refreshenv

      # Install CVS. Disabled because msys2 installation takes too long.
      #cinst msys2 --params "/InstallDir=C:/msys64" --no-progress
      #C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Sy cvs"
      #$env:PATH += ";C:\msys64\usr\bin"

      # Install NPM packages.
      npm install -g npm@$env:NPM_VERSION bower@$env:BOWER_VERSION

      # Install Python packages.
      pip install --user conan==$env:CONAN_VERSION pipenv==$env:PYTHON_PIPENV_VERSION virtualenv==$env:VIRTUALENV_VERSION
      conan user # Create the conan data directory. Automatic detection of your arch, compiler, etc.

      # Stop adb because it otherwise locks the working directory which fails the checkout step.
      Stop-Process -Name "adb"

      ## Install git-repo.
      Invoke-WebRequest -Uri "https://storage.googleapis.com/git-repo-downloads/repo" -OutFile "$env:PROGRAMFILES\Git\usr\bin\repo"

      # Update PATH for next steps, see:
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=powershell#prependpath-prepend-a-path-to-the--path-environment-variable
      echo "##vso[task.setvariable variable=path;]$env:PATH"
    displayName: Install Required Tools
    errorActionPreference: continue
    failOnStderr: false

  # Clone repository.
  - checkout: self
    fetchDepth: 1
    submodules: recursive

  # Gradle build cache, see: https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
  - task: Cache@2
    inputs:
      key: '"$(Agent.OS)" | analyzer-test | gradle-caches | v1 | gradle.properties, settings.gradle.kts, **/build.gradle.kts'
      restoreKeys: |
        "$(Agent.OS)" | analyzer-test | gradle-caches | v1
      path: $(GRADLE_USER_HOME)/caches
    displayName: Cache Gradle Caches

  - task: Cache@2
    inputs:
      key: '"$(Agent.OS)" | gradle-wrapper | gradle/wrapper/gradle-wrapper.properties'
      restoreKeys: |
        "$(Agent.OS)" | gradle-wrapper
      path: $(GRADLE_USER_HOME)/wrapper/dists
    displayName: Cache Gradle Wrapper

  - bash: |
      # Create the ORT_DATA_DIR, in case it is not created because the test task is skipped because of the Gradle cache.
      mkdir $ORT_DATA_DIR

      # Export a DAY_OF_YEAR variable to be able to use it as a cache key.
      export DAY_OF_YEAR=$(date '+%j')
      echo "##vso[task.setvariable variable=DAY_OF_YEAR;]$DAY_OF_YEAR"
    displayName: Prepare Caching ORT Data Dir

  # Cache the ORT data directory. There is no file that could be used as a meaningful cache key, so use the day of year
  # instead to make sure the cache is updated once a day.
  - task: Cache@2
    inputs:
      key: '"$(Agent.OS)" | analyzer-test | ort-data | "$(DAY_OF_YEAR)"'
      restoreKeys: |
        "$(Agent.OS)" | analyzer-test | ort-data
      path: $(ORT_DATA_DIR)
    displayName: Cache ORT Data Dir

  # Check requirements.
  # Enable this task to check installed requirements, e.g. after upgrading the required version of a system
  # dependency.
  - task: Gradle@2
    displayName: Check requirements
    continueOnError: true
    enabled: false # TODO: Make this a Pipeline parameter to be able to activate it in the UI.
    inputs:
      gradleWrapperFile: gradlew.bat
      options: --no-daemon -x reporter-web-app:yarnBuild --scan
      tasks: 'cli:run --args="requirements"'
      javaHomeOption: JDKVersion
      jdkVersionOption: 1.11
      gradleOptions: -Xmx4096m

  # Build and test.
  - task: Gradle@2
    displayName: Run Tests
    inputs:
      gradleWrapperFile: gradlew.bat
      # TODO: Only exclude ExpensiveTag on PR builds.
      options: --no-daemon --stacktrace -x reporter-web-app:yarnBuild -Djava.io.tmpdir=C:/temp -Dkotest.tags.exclude=ExpensiveTag -Dkotest.assertions.multi-line-diff=simple -PbuildCacheRetentionDays=3
      tasks: analyzer:test analyzer:funTest
      publishJUnitResults: true
      testResultsFiles: '**/flattened/TEST-*.xml'
      testRunTitle:  $(Agent.JobName)
      javaHomeOption: JDKVersion
      jdkVersionOption: 1.11
      gradleOptions: -Xmx8192m

  # Clean disk space before caching starts, otherwise the disk might run full.
  - task: Gradle@2
    displayName: Gradle Clean
    inputs:
      gradleWrapperFile: gradlew.bat
      options: --no-daemon
      tasks: clean
      javaHomeOption: JDKVersion
      jdkVersionOption: 1.11

  # Ensure that any running Gradle daemon is stopped before caching starts.
  - bash: ./gradlew --stop
    displayName: Stop Gradle Daemon
