# Copyright (C) 2023 The ORT Project Authors (see <https://github.com/oss-review-toolkit/ort/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

name: "ORT Docker image"
description: "Check and create Docker image for ORT components"
author: "The ORT Project Authors"

inputs:
  registry:
    description: "GitHub container registry"
    default: "ghcr.io"
  token:
    description: "GitHub token"
    required: true
  name:
    description: "Image name"
    required: true
  version:
    description: "Image version"
    required: true
  build-args:
    description: "List of build-time variables"
    required: false

runs:
  using: "composite"

  steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Check if Docker image tag exists
      id: check_image
      shell: bash
      env:
        INPUT_REGISTRY: ${{ inputs.registry }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_NAME: ${{ inputs.name }}
        INPUT_VERSION: ${{ inputs.version }}
        BUILD_ARGS: ${{ inputs.build-args }}
      run: |
        pip install -q -U pip requests

        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          INVALIDATE_CACHE=1
          export INVALIDATE_CACHE
        fi
        result=$(python ./.github/actions/ortdocker/check_image.py)
        echo "result=$result" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker build
      if: steps.check_image.outputs.result != 'found'
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub container registry
      if: steps.check_image.outputs.result != 'found'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.token }}

    - name: Extract components metadata (tags, labels)
      if: steps.check_image.outputs.result != 'found'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ github.repository }}/${{ inputs.name }}
        tags: |
          type=raw,value=${{ inputs.version }}
          type=raw,value=${{ steps.check_image.outputs.result }}

    - name: Build base image
      if: >
        steps.check_image.outputs.result != 'found' &&
        inputs.name == 'base'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        target: ${{ inputs.name }}
        push: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        load: false
        build-args: ${{ inputs.build-args }}
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ github.repository }}/${{ inputs.name }}:latest
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build image
      if: >
        steps.check_image.outputs.result != 'found' &&
        inputs.name != 'base'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        target: ${{ inputs.name }}
        push: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        load: false
        build-args: ${{ inputs.build-args }}
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ github.repository }}/${{ inputs.name }}:latest
        labels: ${{ steps.meta.outputs.labels }}
        build-contexts: |
          base=docker-image://${{ inputs.registry }}/${{ github.repository }}/base:latest
