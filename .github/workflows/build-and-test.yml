name: Build and Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dkotest.assertions.multi-line-diff=unified -Dkotest.tags=!ExpensiveTag
  REGISTRY: ghcr.io
  TEST_IMAGE_TAG: ort:test

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-2025]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
    - name: Setup Java
      uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
      with:
        distribution: temurin
        java-version: 21
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ed408507eac070d1f99cc633dbcf757c94c7933a # v4
    - name: Build all classes
      run: ./gradlew classes
  codeql-analysis:
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      # Needed for SARIF scanning upload.
      security-events: write
    steps:
    - name: Checkout Repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
    - name: Initialize CodeQL
      uses: github/codeql-action/init@d3678e237b9c32a6c9bffb3315c335f976f3549f # v3
      with:
        languages: java
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ed408507eac070d1f99cc633dbcf757c94c7933a # v4
    - name: Build all classes
      run: ./gradlew -Dorg.gradle.jvmargs=-Xmx1g --no-build-cache classes
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@d3678e237b9c32a6c9bffb3315c335f976f3549f # v3
  test:
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-2025]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    needs: build
    steps:
    - name: Checkout Repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
    - name: Setup Java
      uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
      with:
        distribution: temurin
        java-version: 21
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ed408507eac070d1f99cc633dbcf757c94c7933a # v4
    - name: Run unit tests
      run: ./gradlew --scan test jacocoTestReport
    - name: Create Test Summary
      uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86 # v2
      with:
        paths: "**/test-results/**/TEST-*.xml"
      if: always()
    - name: Upload code coverage data
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: test-${{ matrix.os }}
  funTest-non-docker:
    needs: build
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      with:
        submodules: recursive
    - name: Set tool version environment variables
      run: cat .env.versions >> $GITHUB_ENV
    - name: Install required tools
      run: |
          # Install git-repo.
          mkdir -p $HOME/.local/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo -o $HOME/.local/bin/repo
          chmod a+x $HOME/.local/bin/repo

          # Install Askalono for functional tests.
          curl -LOs https://github.com/amzn/askalono/releases/download/$ASKALONO_VERSION/askalono-Linux.zip
          unzip askalono-Linux.zip -d $HOME/.local/bin

          # Install Licensee for functional tests.
          echo "gem: --bindir $HOME/.local/bin" > $HOME/.gemrc
          gem install --user-install licensee -v $LICENSEE_VERSION

          # Install ScanCode for license texts.
          curl -Os https://raw.githubusercontent.com/nexB/scancode-toolkit/v$SCANCODE_VERSION/requirements.txt
          pipx install --pip-args="--no-cache-dir --constraint requirements.txt" scancode-toolkit==$SCANCODE_VERSION
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ed408507eac070d1f99cc633dbcf757c94c7933a # v4
    - name: Run functional tests that do not require external tools
      run: ./gradlew --scan -Ptests.exclude=org.ossreviewtoolkit.plugins.packagemanagers.* funTest jacocoFunTestReport
    - name: Create Test Summary
      uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86 # v2
      with:
        paths: "**/test-results/**/TEST-*.xml"
      if: always()
    - name: Upload code coverage data
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: funTest-non-docker
  funTest-docker:
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      with:
        submodules: recursive
    - name: Free Disk Space
      uses: ./.github/actions/free-disk-space
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
    - name: Build ORT Docker Image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      with:
        context: .
        load: true
        tags: ${{ env.TEST_IMAGE_TAG }}
        target: all-tools
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/ort:cache
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ed408507eac070d1f99cc633dbcf757c94c7933a # v4
    - name: Run functional tests that do require external tools
      run: |
        # Run the functional tests in the Docker container.
        docker run \
          -u $(id -u):$(id -g) \
          -v /etc/group:/etc/group:ro \
          -v /etc/passwd:/etc/passwd:ro \
          -v /home/runner:/home/runner \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          -e HOME=/home/runner \
          -e GRADLE_OPTS="$GRADLE_OPTS" \
          ${{ env.TEST_IMAGE_TAG }} \
          -c "./gradlew --scan -Ptests.include=org.ossreviewtoolkit.plugins.packagemanagers.* funTest jacocoFunTestReport"
    - name: Create Test Summary
      uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86 # v2
      with:
        paths: "**/test-results/**/TEST-*.xml"
      if: always()
    - name: Upload code coverage data
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: funTest-docker
