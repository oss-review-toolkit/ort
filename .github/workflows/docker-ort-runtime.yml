# Copyright (C) 2023 The ORT Project Authors (see <https://github.com/oss-review-toolkit/ort/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

name: Mega Docker runtime image

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '.versions'
      - 'Dockerfile'
  push:
    branches:
      - main
    tags:
      - '*'

env:
  REGISTRY: ghcr.io

permissions: write-all

jobs:
  base_image:
    name: Base image
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
      - name: Set environment variables
        run: |
          cat .versions >> $GITHUB_ENV
      - name: Build base image
        uses: ./.github/actions/ortdocker
        with:
          name: base
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "${{ env.JAVA_VERSION }}-jdk-${{ env.UBUNTU_VERSION }}"
          build-args: |
            JAVA_VERSION=${{ env.JAVA_VERSION }}
            UBUNTU_VERSION=${{ env.UBUNTU_VERSION }}

  nodejs_image:
    name: NodeJS image
    needs: [ base_image ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
      - name: Set environment variables
        run: |
          cat .versions >> $GITHUB_ENV
      - name: Build NodeJS image
        uses: ./.github/actions/ortdocker
        with:
          name: nodejs
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "${{ env.NODEJS_VERSION }}"
          build-args: |
            NODEJS_VERSION=${{ env.NODEJS_VERSION }}
            NPM_VERSION=${{ env.NPM_VERSION }}
            PNPM_VERSION=${{ env.PNPM_VERSION }}
            YARN_VERSION=${{ env.YARN_VERSION }}

  python_image:
    name: Python image
    needs: [ base_image ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
      - name: Set environment variables
        run: |
          cat .versions >> $GITHUB_ENV
      - name: Build Python image
        uses: ./.github/actions/ortdocker
        with:
          name: python
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "${{ env.PYTHON_VERSION }}"
          build-args: |
            CONAN_VERSION=${{ env.CONAN_VERSION }}
            PIPTOOL_VERSION=${{ env.PIPTOOL_VERSION }}
            PYENV_GIT_TAG=${{ env.PYENV_GIT_TAG }}
            PYTHON_INSPECTOR_VERSION=${{ env.PYTHON_INSPECTOR_VERSION }}
            PYTHON_PIPENV_VERSION=${{ env.PYTHON_PIPENV_VERSION }}
            PYTHON_POETRY_VERSION=${{ env.PYTHON_POETRY_VERSION }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            SCANCODE_VERSION=${{ env.SCANCODE_VERSION }}

  rust_image:
    name: Rust image
    needs: [ base_image ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
      - name: Set environment variables
        run: |
          cat .versions >> $GITHUB_ENV
      - name: Build Rust image
        uses: ./.github/actions/ortdocker
        with:
          name: rust
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "${{ env.RUST_VERSION }}"
          build-args: |
            RUST_VERSION=${{ env.RUST_VERSION }}

  ruby_image:
    name: Ruby image
    needs: [ base_image ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
      - name: Set environment variables
        run: |
          cat .versions >> $GITHUB_ENV
      - name: Build Ruby image
        uses: ./.github/actions/ortdocker
        with:
          name: ruby
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "${{ env.RUBY_VERSION }}"
          build-args: |
            RUBY_VERSION=${{ env.RUBY_VERSION }}
            COCOAPODS_VERSION=${{ env.COCOAPODS_VERSION }}

  golang_image:
    name: Golang image
    needs: [ base_image ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
      - name: Set environment variables
        run: |
          cat .versions >> $GITHUB_ENV
      - name: Build Golang image
        uses: ./.github/actions/ortdocker
        with:
          name: golang
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "${{ env.GO_VERSION }}"
          build-args: |
            GO_DEP_VERSION=${{ env.GO_DEP_VERSION }}
            GO_VERSION=${{ env.GO_VERSION }}

  runtime_image:
    needs: [ base_image, nodejs_image, python_image, rust_image, ruby_image, golang_image ]
    name: Build ORT runtime image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          cat .versions >> $GITHUB_ENV

      - name: Set up Docker build
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract components metadata (tags, labels)
        id: meta-ort
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/ort
          tags: |
            type=raw,sha,enable=true,format=short

      - name: Build ORT runtime image
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          target: run
          push: true
          load: false
          build-args: |
            NODEJS_VERSION=${{ env.NODEJS_VERSION }}
          tags: |
            ${{ steps.meta-ort.outputs.tags }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/ort:latest
          labels: ${{ steps.meta.outputs.labels }}
          build-contexts: |
            nodejs=docker-image://${{ env.REGISTRY }}/${{ github.repository }}/nodejs:latest
            python=docker-image://${{ env.REGISTRY }}/${{ github.repository }}/python:latest
            rust=docker-image://${{ env.REGISTRY }}/${{ github.repository }}/rust:latest
            ruby=docker-image://${{ env.REGISTRY }}/${{ github.repository }}/ruby:latest
            golang=docker-image://${{ env.REGISTRY }}/${{ github.repository }}/golang:latest
