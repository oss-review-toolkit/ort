[versions]
buildConfigPlugin = "3.1.0"
detektPlugin = "1.22.0"
dokkaPlugin = "1.7.20"
downloadPlugin = "5.3.0"
graalPlugin = "0.12.0"
graphQlPlugin = "6.3.0"
ideaExtPlugin = "1.1.6"
kotlinPlugin = "1.7.21"
shadowPlugin = "7.1.2"
taskInfoPlugin = "2.0.0"
versionCatalogUpdatePlugin = "0.7.0"
versionsPlugin = "0.44.0"

antlr = "4.11.1"
asciidoctorj = "2.5.7"
asciidoctorjPdf = "2.3.3"
clikt = "3.5.0"
commonsCompress = "1.22"
commonsEmail = "1.5"
cvssCalculator = "1.4.1"
cyclonedx = "7.3.0"
diskLruCache = "2.0.2"
exposed = "0.40.1"
flexmark = "0.64.0"
freemarker = "2.3.31"
# @keep this version which is only being used via get().
graal = "22.2.0"
greenmail = "1.6.11"
hikari = "5.0.1"
hoplite = "2.6.5"
jackson = "2.14.0"
jgit = "6.3.0.202209071007-r"
jiraRestClient = "5.2.4"
jruby = "9.3.9.0"
jslt = "0.1.14"
jsonSchemaValidator = "1.0.73"
kotest = "5.5.4"
kotlinxCoroutines = "1.6.4"
kotlinxHtml = "0.8.0"
kotlinxSerialization = "1.4.1"
ktor = "2.1.3"
log4jApi = "2.19.0"
log4jApiKotlin = "1.2.0"
logbackImpl = "1.4.4"
maven = "3.8.6"
# @pin this version as it needs to be aligned with "maven".
mavenResolver = "1.7.3"
mockk = "1.13.2"
okhttp = "4.9.3"
poiOoxml = "5.2.3"
postgres = "42.5.0"
postgresEmbedded = "1.0.1"
reflections = "0.10.2"
retrofit = "2.9.0"
retrofitConverterKotlinxSerialization = "0.8.0"
saxonHe = "11.4"
scanoss = "1.1.6"
semver4j = "3.1.0"
springCore = "5.3.23"
svnkit = "1.10.9"
sw360Client = "16.0.0-m1"
toml4j = "0.7.2"
wiremock = "2.35.0"
xz = "1.9"

[plugins]
buildConfig = { id = "com.github.gmazzo.buildconfig", version.ref = "buildConfigPlugin" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detektPlugin" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokkaPlugin" }
download = { id = "de.undercouch.download", version.ref = "downloadPlugin" }
graal = { id = "com.palantir.graal", version.ref = "graalPlugin" }
graphQl = { id = "com.expediagroup.graphql", version.ref = "graphQlPlugin" }
ideaExt = { id = "org.jetbrains.gradle.plugin.idea-ext", version.ref = "ideaExtPlugin" }
kotlin = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlinPlugin" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlinPlugin" }
shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadowPlugin" }
taskInfo = { id = "org.barfuin.gradle.taskinfo", version.ref = "taskInfoPlugin" }
versionCatalogUpdate = { id = "nl.littlerobots.version-catalog-update", version.ref = "versionCatalogUpdatePlugin" }
versions = { id = "com.github.ben-manes.versions", version.ref = "versionsPlugin" }

[libraries]
antlr = { module = "org.antlr:antlr4", version.ref = "antlr" }
asciidoctorj = { module = "org.asciidoctor:asciidoctorj", version.ref = "asciidoctorj" }
asciidoctorjPdf = { module = "org.asciidoctor:asciidoctorj-pdf", version.ref = "asciidoctorjPdf" }
clikt = { module = "com.github.ajalt.clikt:clikt", version.ref = "clikt" }
commonsCompress = { module = "org.apache.commons:commons-compress", version.ref = "commonsCompress" }
commonsEmail = { module = "org.apache.commons:commons-email", version.ref = "commonsEmail" }
cvssCalculator = { module = "us.springett:cvss-calculator", version.ref = "cvssCalculator" }
cyclonedx = { module = "org.cyclonedx:cyclonedx-core-java", version.ref = "cyclonedx" }
detektApi = { module = "io.gitlab.arturbosch.detekt:detekt-api", version.ref = "detektPlugin" }
diskLruCache = { module = "com.jakewharton:disklrucache", version.ref = "diskLruCache" }
exposedCore = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposedDao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposedJavaTime = { module = "org.jetbrains.exposed:exposed-java-time", version.ref = "exposed" }
exposedJdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
flexmark = { module = "com.vladsch.flexmark:flexmark", version.ref = "flexmark" }
freemarker = { module = "org.freemarker:freemarker", version.ref = "freemarker" }
graphQlKtorClient = { module = "com.expediagroup:graphql-kotlin-ktor-client", version.ref = "graphQlPlugin" }
greenmail = { module = "com.icegreen:greenmail", version.ref = "greenmail" }
hikari = { module = "com.zaxxer:HikariCP", version.ref = "hikari" }
hopliteCore = { module = "com.sksamuel.hoplite:hoplite-core", version.ref = "hoplite" }
hopliteYaml = { module = "com.sksamuel.hoplite:hoplite-yaml", version.ref = "hoplite" }
jacksonDatabind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jacksonDataformatXml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml", version.ref = "jackson" }
jacksonDataformatYaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jacksonDatatypeJsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jacksonModuleJaxbAnnotations = { module = "com.fasterxml.jackson.module:jackson-module-jaxb-annotations", version.ref = "jackson" }
jacksonModuleKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jgit = { module = "org.eclipse.jgit:org.eclipse.jgit", version.ref = "jgit" }
jgitSshApacheAgent = { module = "org.eclipse.jgit:org.eclipse.jgit.ssh.apache.agent", version.ref = "jgit" }
jiraRestClientApi = { module = "com.atlassian.jira:jira-rest-java-client-api", version.ref = "jiraRestClient" }
jiraRestClientApp = { module = "com.atlassian.jira:jira-rest-java-client-app", version.ref = "jiraRestClient" }
jruby = { module = "org.jruby:jruby-complete", version.ref = "jruby" }
jslt = { module = "com.schibsted.spt.data:jslt", version.ref = "jslt" }
jsonSchemaValidator = { module = "com.networknt:json-schema-validator", version.ref = "jsonSchemaValidator" }
kotestAssertionsCore = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotestAssertionsJson = { module = "io.kotest:kotest-assertions-json", version.ref = "kotest" }
kotestExtensionsJunitXml = { module = "io.kotest:kotest-extensions-junitxml", version.ref = "kotest" }
kotestFrameworkApi = { module = "io.kotest:kotest-framework-api", version.ref = "kotest" }
kotestFrameworkEngine = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
kotestRunnerJunit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotlinxCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
kotlinxHtml = { module = "org.jetbrains.kotlinx:kotlinx-html-jvm", version.ref = "kotlinxHtml" }
kotlinxSerialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }
ktorClientCore = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktorClientOkHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
# @keep this library which is only being used via force().
log4jApi = { module = "org.apache.logging.log4j:log4j-api", version.ref = "log4jApi" }
log4jApiKotlin = { module = "org.apache.logging.log4j:log4j-api-kotlin", version.ref = "log4jApiKotlin" }
log4jApiToSlf4j = { module = "org.apache.logging.log4j:log4j-to-slf4j", version.ref = "log4jApi" }
logbackClassic = { module = "ch.qos.logback:logback-classic", version.ref = "logbackImpl" }
mavenCompat = { module = "org.apache.maven:maven-compat", version.ref = "maven" }
mavenCore = { module = "org.apache.maven:maven-core", version.ref = "maven" }
mavenResolverConnectorBasic = { module = "org.apache.maven.resolver:maven-resolver-connector-basic", version.ref = "mavenResolver" }
mavenResolverTransportFile = { module = "org.apache.maven.resolver:maven-resolver-transport-file", version.ref = "mavenResolver" }
mavenResolverTransportHttp = { module = "org.apache.maven.resolver:maven-resolver-transport-http", version.ref = "mavenResolver" }
mavenResolverTransportWagon = { module = "org.apache.maven.resolver:maven-resolver-transport-wagon", version.ref = "mavenResolver" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
poiOoxml = { module = "org.apache.poi:poi-ooxml", version.ref = "poiOoxml" }
postgres = { module = "org.postgresql:postgresql", version.ref = "postgres" }
postgresEmbedded = { module = "com.opentable.components:otj-pg-embedded", version.ref = "postgresEmbedded" }
reflections = { module = "org.reflections:reflections", version.ref = "reflections" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofitConverterJackson = { module = "com.squareup.retrofit2:converter-jackson", version.ref = "retrofit" }
retrofitConverterKotlinxSerialization = { module = "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter", version.ref = "retrofitConverterKotlinxSerialization" }
retrofitConverterScalars = { module = "com.squareup.retrofit2:converter-scalars", version.ref = "retrofit" }
saxonHe = { module = "net.sf.saxon:Saxon-HE", version.ref = "saxonHe" }
scanoss = { module = "com.scanoss:scanner", version.ref = "scanoss" }
semver4j = { module = "com.vdurmont:semver4j", version.ref = "semver4j" }
springCore = { module = "org.springframework:spring-core", version.ref = "springCore" }
svnkit = { module = "org.tmatesoft.svnkit:svnkit", version.ref = "svnkit" }
sw360Client = { module = "org.eclipse.sw360:client", version.ref = "sw360Client" }
toml4j = { module = "com.moandjiezana.toml:toml4j", version.ref = "toml4j" }
wiremock = { module = "com.github.tomakehurst:wiremock-jre8", version.ref = "wiremock" }
xz = { module = "org.tukaani:xz", version.ref = "xz" }

[bundles]
exposed = ["exposedCore", "exposedDao", "exposedJdbc", "exposedJavaTime"]
hoplite = ["hopliteCore", "hopliteYaml"]
maven = ["mavenCore", "mavenCompat"]
mavenResolver = ["mavenResolverConnectorBasic", "mavenResolverTransportFile", "mavenResolverTransportHttp", "mavenResolverTransportWagon"]
