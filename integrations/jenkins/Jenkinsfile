/*
 * Copyright (C) 2020 The ORT Project Authors (see <https://github.com/oss-review-toolkit/ort/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import com.cloudbees.groovy.cps.NonCPS

import groovy.transform.Field

import java.io.IOException

import org.jenkinsci.plugins.pipeline.modeldefinition.Utils

// Disable the entry point to work around https://issues.jenkins-ci.org/browse/JENKINS-51307.
final DOCKER_RUN_ARGS = '-e http_proxy -e https_proxy --entrypoint=""'

// The minimum status code ORT CLI commands return on exit for failures (like rule violations), not errors (like
// existing output files).
final ORT_FAILURE_STATUS_CODE = 2

def projectVcsCredentials = []
def ortConfigVcsCredentials = []

@Field
def ortVersion = 'JENKINS-SNAPSHOT'

@NonCPS
def getDockerBuildArgs() {
    def defaultArgs = ['http_proxy=$http_proxy', 'https_proxy=$https_proxy', "ORT_VERSION=$ortVersion"]
    def customArgs = params.CUSTOM_DOCKER_BUILD_ARGS.tokenize(',')
    return (defaultArgs + customArgs).collect { "--build-arg ${it.trim()}" }.join(' ')
}

@NonCPS
static sortProjectsByPathDepth(projects) {
    return projects.toSorted { it.definition_file_path.count("/") }
}

pipeline {
    agent none

    parameters {
        /*
         * Parameters about the project to run ORT on.
         */

        string(
            name: 'CUSTOM_DOCKER_BUILD_ARGS',
            description: 'A comma-separated list of arguments to pass to the Docker build, e.g. "JAVA_VERSION=17,SCANCODE_VERSION=32.0.8".',
            defaultValue: ''
        )

        /*
         * Parameters about the project to run ORT on.
         */

        string(
            name: 'PROJECT_VCS_URL',
            description: 'The VCS clone URL of the project.',
            defaultValue: 'https://github.com/vdurmont/semver4j.git'
        )

        string(
            name: 'PROJECT_VCS_REVISION',
            description: 'Optional VCS revision of the project (prefix Git tags with "refs/tags/").',
            defaultValue: ''
        )

        credentials(
            name: 'PROJECT_VCS_CREDENTIALS',
            credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
            description: 'Optional HTTP credentials to use for the VCS checkout.',
            defaultValue: ''
        )

        /*
         * General ORT parameters.
         */

        string(
            name: 'ORT_CONFIG_VCS_URL',
            description: 'Optional VCS clone URL of the ORT configuration.',
            defaultValue: 'https://github.com/oss-review-toolkit/ort-config.git'
        )

        string(
            name: 'ORT_CONFIG_VCS_REVISION',
            description: 'Optional VCS revision of the ORT configuration (prefix Git tags with "refs/tags/").',
            defaultValue: ''
        )

        string(
            name: 'ORT_CONFIG_VCS_PATH',
            description: 'Optional VCS path of the ORT configuration.',
            defaultValue: ''
        )

        credentials(
            name: 'ORT_CONFIG_VCS_CREDENTIALS',
            credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
            description: 'Optional HTTP credentials to use for the VCS checkout.',
            defaultValue: ''
        )

        booleanParam(
            name: 'SKIP_EXCLUDED',
            description: 'Enable to skip scopes and paths that have been configured to be excluded, where supported.',
            defaultValue: true
        )

        string(
            name: 'PLUGIN_JOB_NAME',
            description: 'The name of the job to copy plugins from. The distribution must be at "build/distributions/*.tar".',
            defaultValue: ''
        )

        buildSelector(
            name: 'PLUGIN_BUILD_SELECTOR',
            description: 'The selector for the build of the plugin job to copy plugins from.',
            defaultSelector: lastSuccessful()
        )

        string(
            name: 'ENVIRONMENT_VARIABLES',
            description: 'Optional list of comma-separated key=value pairs of environment variables to set.',
            defaultValue: ''
        )

        choice(
            name: 'LOG_LEVEL',
            description: 'The logging level.',
            choices: ['', '--error', '--warn', '--info', '--debug']
        )

        booleanParam(
            name: 'STACKTRACE',
            description: 'Show the stacktrace for all exceptions.',
            defaultValue: false
        )

        /*
         * ORT analyzer tool parameters.
         */

        stashedFile(
            name: 'ANALYZER_RESULT',
            description: 'An optional existing analyzer result file to use instead of running the analyzer.'
        )

        string(
            name: 'ANALYZER_INPUT_PATH',
            description: 'The path to analyze, relative to the repository root. May point to a definition file if only a single package manager is enabled.',
            defaultValue: ''
        )

        booleanParam(
            name: 'ALLOW_DYNAMIC_VERSIONS',
            description: 'Allow dynamic versions of dependencies (support projects without lockfiles).',
            defaultValue: false
        )

        booleanParam(
            name: 'USE_ORT_CONFIG_CURATIONS',
            description: 'Use package curation data from the ORT config repository.',
            defaultValue: false
        )

        booleanParam(
            name: 'USE_CLEARLY_DEFINED_CURATIONS',
            description: 'Use package curation data from the ClearlyDefined service.',
            defaultValue: true
        )

        string(
            name: 'ENABLED_PACKAGE_MANAGERS',
            description: 'A comma-separated list of package managers to enable. By default all package managers are enabled.',
            defaultValue: ''
        )

        string(
            name: 'DISABLED_PACKAGE_MANAGERS',
            description: 'A comma-separated list of package managers to disable. By default no package manager is disabled.',
            defaultValue: ''
        )

        /*
         * ORT scanner tool parameters.
         */

        booleanParam(
            name: 'RUN_SCANNER',
            description: 'Run the scanner tool.',
            defaultValue: true
        )

        booleanParam(
            name: 'SKIP_CONCLUDED',
            description: 'Enable to skip scanning packages that have a concluded license and authors set.',
            defaultValue: true
        )

        choice(
            name: 'PROJECT_SCANNER',
            description: 'The built-in scanner to use for project source code.',
            choices: ['ScanCode', 'Askalono', 'BoyterLc', 'Licensee', 'ScanOSS', '<NONE>']
        )

        string(
            name: 'PROJECT_SCANNER_PLUGIN',
            description: 'The scanner plugin to use for project source code. Overrides any built-in scanner.',
            defaultValue: ''
        )

        choice(
            name: 'PACKAGE_SCANNER',
            description: 'The scanner to use for package source code.',
            choices: ['ScanCode', 'Askalono', 'BoyterLc', 'Licensee', 'ScanOSS', '<NONE>']
        )

        string(
            name: 'PACKAGE_SCANNER_PLUGIN',
            description: 'The scanner plugin to use for package source code. Overrides any built-in scanner.',
            defaultValue: ''
        )

        booleanParam(
            name: 'USE_CLEARLY_DEFINED_SCAN_STORAGE',
            description: 'Use the ClearlyDefined service to retrieve existing scan results. This overrides any other scan storage configuration.',
            defaultValue: true
        )

        /*
         * ORT advisor tool parameters.
         */

        booleanParam(
            name: 'RUN_ADVISOR',
            description: 'Run the advisor tool.',
            defaultValue: true
        )

        string(
            name: 'ADVISORS',
            description: 'A comma-separated list of advisors to use.',
            defaultValue: 'OSV,VulnerableCode'
        )

        /*
         * ORT evaluator tool parameters.
         */

        booleanParam(
            name: 'RUN_EVALUATOR',
            description: 'Run the evaluator tool.',
            defaultValue: true
        )

        booleanParam(
            name: 'USE_OSADL_RULES',
            description: 'Use built-in rules based on the OSADL license compliance matrix.',
            defaultValue: true
        )

        booleanParam(
            name: 'USE_CONFIG_RULES',
            description: 'Use rules from the ORT configuration, if present.',
            defaultValue: true
        )

        /*
         * ORT reporter tool parameters.
         */

        booleanParam(
            name: 'RUN_REPORTER',
            description: 'Run the reporter tool.',
            defaultValue: true
        )

        string(
            name: 'REPORT_FORMATS',
            description: 'A comma-separated list of report formats to generate.',
            defaultValue: 'CycloneDX,SpdxDocument,PdfTemplate,PlainTextTemplate,StaticHTML,WebApp'
        )

        string(
            name: 'REPORT_FORMATS_OPTIONS',
            description: 'A comma-separated list of report-format-specific options, e.g. "PlainTextTemplate=template.id=NOTICE_SUMMARY".',
            defaultValue: ''
        )
    }

    stages {
        stage('Configure pipeline') {
            agent any

            steps {
                script {
                    if (!params.PROJECT_VCS_CREDENTIALS.allWhitespace) {
                        projectVcsCredentials += usernamePassword(credentialsId: params.PROJECT_VCS_CREDENTIALS, usernameVariable: 'LOGIN', passwordVariable: 'PASSWORD')
                    }

                    if (!params.ORT_CONFIG_VCS_CREDENTIALS.allWhitespace) {
                        ortConfigVcsCredentials += usernamePassword(credentialsId: params.ORT_CONFIG_VCS_CREDENTIALS, usernameVariable: 'LOGIN', passwordVariable: 'PASSWORD')
                    }

                    ortVersion = env.GIT_COMMIT.take(10)
                }

                sh '''
                rm -fr cli/src/main/dist/plugin
                '''.stripIndent().trim()
            }
        }

        stage('Install plugins') {
            agent any

            when {
                beforeAgent true

                expression {
                    !params.PLUGIN_JOB_NAME.allWhitespace
                }
            }

            steps {
                script {
                    copyArtifacts(projectName: params.PLUGIN_JOB_NAME, selector: buildParameter(params.PLUGIN_BUILD_SELECTOR), filter: 'build/distributions/*.tar')
                }

                sh '''
                tar -C cli/src/main/dist/plugin --strip-components=1 -xf build/distributions/*.tar && rm build/distributions/*.tar
                '''.stripIndent().trim()
            }
        }

        /*
         * This is a "dummy" stage to build the Docker image explicitly (if needed) so that the time for building the
         * image is not included in other stages.
         */
        stage('Build ORT Docker image') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    additionalBuildArgs getDockerBuildArgs()
                    args DOCKER_RUN_ARGS
                }
            }

            environment {
                HOME = "${env.WORKSPACE}@tmp"
                JAVA_OPTS = "-Duser.home=${env.HOME}"
            }

            steps {
                sh '''
                ORT_OPTIONS="$LOG_LEVEL"

                if [ "$STACKTRACE" = "true" ]; then
                    ORT_OPTIONS="$ORT_OPTIONS --stacktrace"
                fi

                /opt/ort/bin/ort $ORT_OPTIONS requirements --list plugins
                '''.stripIndent().trim()
            }
        }

        stage('Clone project') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    additionalBuildArgs getDockerBuildArgs()
                    args DOCKER_RUN_ARGS
                }
            }

            environment {
                HOME = "${env.WORKSPACE}@tmp"
                JAVA_OPTS = "-Duser.home=${env.HOME}"
                PROJECT_DIR = "${env.HOME}/project"
            }

            steps {
                withCredentials(projectVcsCredentials) {
                    sh '''
                    ORT_OPTIONS="$LOG_LEVEL -P ort.downloader.skipExcluded=$SKIP_EXCLUDED"

                    if [ "$STACKTRACE" = "true" ]; then
                        ORT_OPTIONS="$ORT_OPTIONS --stacktrace"
                    fi

                    if [ -n "$PROJECT_VCS_REVISION" ]; then
                        VCS_REVISION_OPTION="--vcs-revision $PROJECT_VCS_REVISION"
                    fi

                    echo "default login $LOGIN password $PASSWORD" > "$HOME/.netrc"

                    rm -fr "$PROJECT_DIR"
                    /opt/ort/bin/ort $ORT_OPTIONS download --project-url $PROJECT_VCS_URL $VCS_REVISION_OPTION -o "$PROJECT_DIR/source"

                    rm -f "$HOME/.netrc"
                    '''.stripIndent().trim()
                }
            }
        }

        stage('Clone ORT configuration') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    additionalBuildArgs getDockerBuildArgs()
                    args DOCKER_RUN_ARGS
                }
            }

            when {
                beforeAgent true

                expression {
                    !params.ORT_CONFIG_VCS_URL.allWhitespace
                }
            }

            environment {
                HOME = "${env.WORKSPACE}@tmp"
                JAVA_OPTS = "-Duser.home=${env.HOME}"
                ORT_DATA_DIR = "${env.HOME}/.ort"
            }

            steps {
                withCredentials(ortConfigVcsCredentials) {
                    sh '''
                    ORT_OPTIONS="$LOG_LEVEL"

                    if [ "$STACKTRACE" = "true" ]; then
                        ORT_OPTIONS="$ORT_OPTIONS --stacktrace"
                    fi

                    if [ -n "$ORT_CONFIG_VCS_REVISION" ]; then
                        VCS_REVISION_OPTION="--vcs-revision $ORT_CONFIG_VCS_REVISION"
                    fi

                    echo "default login $LOGIN password $PASSWORD" > "$HOME/.netrc"

                    rm -fr "$ORT_DATA_DIR/config"
                    /opt/ort/bin/ort $ORT_OPTIONS download --project-url $ORT_CONFIG_VCS_URL $VCS_REVISION_OPTION -o "$ORT_DATA_DIR/config"

                    rm -f "$HOME/.netrc"
                    '''.stripIndent().trim()
                }

                script {
                    env.ORT_CONFIG_DIR = "${env.ORT_DATA_DIR}/config/${env.ORT_CONFIG_VCS_PATH}"
                }

                sh '''
                if [ -f "$ORT_CONFIG_DIR/config.yml" ]; then
                    echo "Not creating '$ORT_CONFIG_DIR/config.yml' as it already exists."
                else
                    echo "Creating '$ORT_CONFIG_DIR/config.yml' template for job parameters."
                    cat >"$ORT_CONFIG_DIR/config.yml" <<EOF
                ort:
                  packageCurationProviders:
                    - name: DefaultFile
                    - name: DefaultDir
                    - name: OrtConfig
                      enabled: ${USE_ORT_CONFIG_CURATIONS}
                    - name: ClearlyDefined
                      enabled: ${USE_CLEARLY_DEFINED_CURATIONS}
                EOF
                fi

                ORT_OPTIONS="$LOG_LEVEL"

                if [ "$STACKTRACE" = "true" ]; then
                    ORT_OPTIONS="$ORT_OPTIONS --stacktrace"
                fi

                /opt/ort/bin/ort $ORT_OPTIONS config --show-active
                '''.stripIndent().trim()
            }
        }

        stage('Unstash ORT analyzer result') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    additionalBuildArgs getDockerBuildArgs()
                    args DOCKER_RUN_ARGS
                }
            }

            when {
                beforeAgent true

                expression {
                    env.ANALYZER_RESULT_FILENAME
                }
            }

            steps {
                // Note: This unstashes the named file parameter to a file named after the parameter. In particular,
                // the original file name is not maintained automatically.
                unstash('ANALYZER_RESULT')

                sh '''
                mkdir -p out/results
                ln -frs ANALYZER_RESULT out/results/current-result.yml
                '''.stripIndent().trim()
            }
        }

        stage('Run ORT analyzer') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    additionalBuildArgs getDockerBuildArgs()
                    args DOCKER_RUN_ARGS
                }
            }

            when {
                beforeAgent true

                expression {
                    !env.ANALYZER_RESULT_FILENAME
                }
            }

            environment {
                HOME = "${env.WORKSPACE}@tmp"
                JAVA_OPTS = "-Duser.home=${env.HOME}"
                PROJECT_DIR = "${env.HOME}/project"
            }

            steps {
                script {
                    params.ENVIRONMENT_VARIABLES.tokenize(',').each {
                        def (key, value) = it.split('=', limit = 2)
                        env."${key.trim()}" = value.trim()
                    }
                }

                script {
                    def status = sh returnStatus: true, script: '''
                    ORT_OPTIONS="$LOG_LEVEL -P ort.analyzer.allowDynamicVersions=$ALLOW_DYNAMIC_VERSIONS -P ort.analyzer.skipExcluded=$SKIP_EXCLUDED"

                    if [ -n "$ENABLED_PACKAGE_MANAGERS" ]; then
                        ORT_OPTIONS="$ORT_OPTIONS -P ort.analyzer.enabledPackageManagers=$ENABLED_PACKAGE_MANAGERS"
                    fi

                    if [ -n "$DISABLED_PACKAGE_MANAGERS" ]; then
                        ORT_OPTIONS="$ORT_OPTIONS -P ort.analyzer.disabledPackageManagers=$DISABLED_PACKAGE_MANAGERS"
                    fi

                    if [ "$STACKTRACE" = "true" ]; then
                        ORT_OPTIONS="$ORT_OPTIONS --stacktrace"
                    fi

                    /opt/ort/bin/set_gradle_proxy.sh

                    rm -fr out/results/analyzer
                    /opt/ort/bin/ort $ORT_OPTIONS analyze -i "$PROJECT_DIR/source/$ANALYZER_INPUT_PATH" -o out/results/analyzer -l JENKINS_BUILD_URL=$BUILD_URL
                    '''.stripIndent().trim()

                    if (status >= ORT_FAILURE_STATUS_CODE) unstable('Analyzer issues found.')
                    else if (status != 0) error('Error executing the analyzer.')
                }

                sh 'ln -frs out/results/analyzer/analyzer-result.yml out/results/current-result.yml'

                script {
                    try {
                        def result = readYaml file: 'out/results/analyzer/analyzer-result.yml'
                        def projects = result.analyzer?.result?.projects

                        if (projects) {
                            // Determine the / a root project simply by sorting by path depth.
                            def sortedProjects = sortProjectsByPathDepth(projects)

                            // There is always at least one (unmanaged) project.
                            def rootProjectId = sortedProjects.first().id

                            currentBuild.displayName += ": $rootProjectId"
                        }
                    } catch (IOException ignored) {
                        // Ignore and just skip setting a custom display name.
                    }
                }
            }

            post {
                always {
                    archiveArtifacts(
                        artifacts: 'out/results/analyzer/*',
                        fingerprint: true
                    )
                }
            }
        }

        stage('Run ORT scanner') {
            when {
                beforeAgent true

                expression {
                    params.RUN_SCANNER
                }
            }

            agent {
                dockerfile {
                    filename 'Dockerfile'
                    additionalBuildArgs getDockerBuildArgs()
                    args DOCKER_RUN_ARGS
                }
            }

            environment {
                HOME = "${env.WORKSPACE}@tmp"
                JAVA_OPTS = "-Duser.home=${env.HOME}"
            }

            steps {
                script {
                    params.ENVIRONMENT_VARIABLES.tokenize(',').each {
                        def (key, value) = it.split('=', limit = 2)
                        env."${key.trim()}" = value.trim()
                    }
                }

                withCredentials(projectVcsCredentials) {
                    script {
                        def status = sh returnStatus: true, script: '''
                        #!/usr/bin/env bash

                        ORT_OPTIONS="$LOG_LEVEL -P ort.scanner.skipExcluded=$SKIP_EXCLUDED -P ort.scanner.skipConcluded=$SKIP_CONCLUDED"

                        if [ "$USE_CLEARLY_DEFINED_SCAN_STORAGE" = "true" ]; then
                            # Configure the default local file storage explicitly to be able to refer to it.
                            ORT_OPTIONS="$ORT_OPTIONS -P ort.scanner.storages.localFiles.backend.localFileStorage.directory=$HOME/.ort/scanner/results"

                            # Configure the ClearlyDefined remote storage.
                            ORT_OPTIONS="$ORT_OPTIONS -P ort.scanner.storages.clearlyDefined.serverUrl=https://api.clearlydefined.io"

                            # Take both storages into use.
                            ORT_OPTIONS="$ORT_OPTIONS -P ort.scanner.storageReaders=localFiles,clearlyDefined \
                                -P ort.scanner.storageWriters=localFiles"
                        fi

                        if [ "$STACKTRACE" = "true" ]; then
                            ORT_OPTIONS="$ORT_OPTIONS --stacktrace"
                        fi

                        PACKAGE_TYPES=(project package)

                        if [ -n "$PROJECT_SCANNER_PLUGIN" ]; then
                            PROJECT_SCANNER="$PROJECT_SCANNER_PLUGIN"
                        fi

                        if [ "$PROJECT_SCANNER" = "<NONE>" ]; then
                            PACKAGE_TYPES=(${PACKAGE_TYPES[@]/project})
                        else
                            PROJECT_SCANNERS_OPTION="--project-scanners $PROJECT_SCANNER"
                        fi

                        if [ -n "$PACKAGE_SCANNER_PLUGIN" ]; then
                            PACKAGE_SCANNER="$PACKAGE_SCANNER_PLUGIN"
                        fi

                        if [ "$PACKAGE_SCANNER" = "<NONE>" ]; then
                            PACKAGE_TYPES=(${PACKAGE_TYPES[@]/package})
                        else
                            SCANNERS_OPTION="--scanners $PACKAGE_SCANNER"
                        fi

                        PACKAGE_TYPES_OPTION=${PACKAGE_TYPES[@]}
                        if [ -n "$PACKAGE_TYPES_OPTION" ]; then
                            PACKAGE_TYPES_OPTION=${PACKAGE_TYPES_OPTION// /,}
                            PACKAGE_TYPES_OPTION="--package-types $PACKAGE_TYPES_OPTION"

                            echo "default login $LOGIN password $PASSWORD" > "$HOME/.netrc"

                            rm -fr out/results/scanner
                            /opt/ort/bin/ort $ORT_OPTIONS scan \
                                -i out/results/current-result.yml \
                                -o out/results/scanner \
                                $PACKAGE_TYPES_OPTION \
                                $PROJECT_SCANNERS_OPTION \
                                $SCANNERS_OPTION

                            rm -f "$HOME/.netrc"
                        fi
                        '''.stripIndent().trim()

                        switch (status) {
                            case 0:
                                if (!fileExists('out/results/scanner/scan-result.yml')) {
                                    sh '''
                                    mkdir -p out/results/scanner
                                    cp out/results/current-result.yml out/results/scanner/scan-result.yml
                                    '''.stripIndent().trim()

                                    Utils.markStageSkippedForConditional('Run ORT scanner')
                                }
                                break

                            case { it >= ORT_FAILURE_STATUS_CODE }:
                                unstable("Scanner issues found (exit code $status).")
                                break

                            default:
                                error("Error executing the scanner (exit code $status).")
                                break
                        }
                    }

                    sh 'ln -frs out/results/scanner/scan-result.yml out/results/current-result.yml'
                }
            }

            post {
                always {
                    archiveArtifacts(
                        artifacts: 'out/results/scanner/*',
                        fingerprint: true
                    )
                }
            }
        }

        stage('Run ORT advisor') {
            when {
                beforeAgent true

                expression {
                    params.RUN_ADVISOR
                }
            }

            agent {
                dockerfile {
                    filename 'Dockerfile'
                    additionalBuildArgs getDockerBuildArgs()
                    args DOCKER_RUN_ARGS
                }
            }

            environment {
                HOME = "${env.WORKSPACE}@tmp"
                JAVA_OPTS = "-Duser.home=${env.HOME}"
            }

            steps {
                script {
                    params.ENVIRONMENT_VARIABLES.tokenize(',').each {
                        def (key, value) = it.split('=', limit = 2)
                        env."${key.trim()}" = value.trim()
                    }
                }

                withCredentials(projectVcsCredentials) {
                    script {
                        def status = sh returnStatus: true, script: '''
                        ORT_OPTIONS="$LOG_LEVEL -P ort.advisor.skipExcluded=$SKIP_EXCLUDED"

                        if [ "$STACKTRACE" = "true" ]; then
                            ORT_OPTIONS="$ORT_OPTIONS --stacktrace"
                        fi

                        if [ -n "$ADVISORS" ]; then
                            ADVISOR_OPTIONS="-a $ADVISORS"
                        fi

                        rm -fr out/results/advisor
                        /opt/ort/bin/ort $ORT_OPTIONS advise $ADVISOR_OPTIONS -i out/results/current-result.yml -o out/results/advisor
                        '''.stripIndent().trim()

                        if (status >= ORT_FAILURE_STATUS_CODE) unstable('Advisor issues found.')
                        else if (status != 0) error('Error executing the advisor.')
                    }

                    sh 'ln -frs out/results/advisor/advisor-result.yml out/results/current-result.yml'
                }
            }

            post {
                always {
                    archiveArtifacts(
                        artifacts: 'out/results/advisor/*',
                        fingerprint: true
                    )
                }
            }
        }

        stage('Run ORT evaluator') {
            when {
                beforeAgent true

                expression {
                    params.RUN_EVALUATOR && (params.USE_OSADL_RULES || params.USE_CONFIG_RULES)
                }
            }

            agent {
                dockerfile {
                    filename 'Dockerfile'
                    additionalBuildArgs getDockerBuildArgs()
                    args DOCKER_RUN_ARGS
                }
            }

            environment {
                HOME = "${env.WORKSPACE}@tmp"
                JAVA_OPTS = "-Duser.home=${env.HOME}"
            }

            steps {
                script {
                    params.ENVIRONMENT_VARIABLES.tokenize(',').each {
                        def (key, value) = it.split('=', limit = 2)
                        env."${key.trim()}" = value.trim()
                    }
                }

                withCredentials(projectVcsCredentials) {
                    script {
                        def status = sh returnStatus: true, script: '''
                        ORT_OPTIONS="$LOG_LEVEL"

                        if [ "$STACKTRACE" = "true" ]; then
                            ORT_OPTIONS="$ORT_OPTIONS --stacktrace"
                        fi

                        RULES_OPTIONS=""

                        if [ "$USE_OSADL_RULES" = "true" ]; then
                            RULES_OPTIONS="$RULES_OPTIONS --rules-resource /rules/osadl.rules.kts"
                        fi

                        if [ "$USE_CONFIG_RULES" = "true" -a -f "$ORT_CONFIG_DIR/evaluator.rules.kts" ]; then
                            RULES_OPTIONS="$RULES_OPTIONS --rules-file $ORT_CONFIG_DIR/evaluator.rules.kts"
                        fi

                        rm -fr out/results/evaluator
                        /opt/ort/bin/ort $ORT_OPTIONS evaluate -i out/results/current-result.yml $RULES_OPTIONS -o out/results/evaluator
                        '''.stripIndent().trim()

                        if (status >= ORT_FAILURE_STATUS_CODE) unstable('Rule violations found.')
                        else if (status != 0) error('Error executing the evaluator.')
                    }

                    sh 'ln -frs out/results/evaluator/evaluation-result.yml out/results/current-result.yml'
                }
            }

            post {
                always {
                    archiveArtifacts(
                        artifacts: 'out/results/evaluator/*',
                        fingerprint: true
                    )
                }
            }
        }

        stage('Run ORT reporter') {
            when {
                beforeAgent true

                expression {
                    params.RUN_REPORTER
                }
            }

            agent {
                dockerfile {
                    filename 'Dockerfile'
                    additionalBuildArgs getDockerBuildArgs()
                    args DOCKER_RUN_ARGS
                }
            }

            environment {
                HOME = "${env.WORKSPACE}@tmp"
                JAVA_OPTS = "-Duser.home=${env.HOME}"
            }

            steps {
                script {
                    params.ENVIRONMENT_VARIABLES.tokenize(',').each {
                        def (key, value) = it.split('=', limit = 2)
                        env."${key.trim()}" = value.trim()
                    }
                }

                sh '''
                ORT_OPTIONS="$LOG_LEVEL"

                if [ "$STACKTRACE" = "true" ]; then
                    ORT_OPTIONS="$ORT_OPTIONS --stacktrace"
                fi

                if [ -n "$REPORT_FORMATS" ]; then
                    REPORT_FORMATS_OPTION="-f $REPORT_FORMATS"
                fi

                if [ -n "$REPORT_FORMATS_OPTIONS" ]; then
                    REPORT_FORMATS_OPTIONS_OPTION="-O $REPORT_FORMATS_OPTIONS"
                fi

                rm -fr out/results/reporter
                /opt/ort/bin/ort $ORT_OPTIONS report \
                    -i out/results/current-result.yml \
                    -o out/results/reporter \
                    $REPORT_FORMATS_OPTION \
                    $REPORT_FORMATS_OPTIONS_OPTION
                '''.stripIndent().trim()
            }

            post {
                always {
                    archiveArtifacts(
                        artifacts: 'out/results/reporter/*',
                        fingerprint: true
                    )
                }
            }
        }
    }
}
