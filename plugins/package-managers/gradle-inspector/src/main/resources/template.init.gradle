/*
 * Copyright (C) 2023 The ORT Project Authors (see <https://github.com/oss-review-toolkit/ort/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import org.ossreviewtoolkit.plugins.packagemanagers.gradleplugin.OrtModelPlugin

initscript {
    dependencies {
        classpath files("<REPLACE_PLUGIN_JAR>")
    }
}

allprojects {
    apply plugin: OrtModelPlugin
    
    // Force Gradle to use Ivy descriptors and disable Gradle metadata for Ivy repositories
    // This allows legacy targetConfiguration to work
    repositories.configureEach { repo ->
        if (repo instanceof org.gradle.api.artifacts.repositories.IvyArtifactRepository) {
            repo.metadataSources {
                ivyDescriptor()
                artifact()
                // Explicitly disable Gradle metadata which causes variant resolution issues
                // with targetConfiguration
            }
            
            // Check if repository should preserve its custom pattern layout
            // Set repo.name = "customIvyLayout" in your build.gradle to skip ORT pattern configuration
            def skipPatternConfig = repo.name?.contains("customIvyLayout") || 
                                   System.getProperty("ort.ivy.preservePatterns") == "true"
            
            if (!skipPatternConfig) {
                // Support multiple Ivy layout patterns for different Artifactory configurations
                // Gradle will try each pattern in order until it finds the artifact
                // m2compatible = false keeps dots in organization (e.g., com.artifactory stays as com.artifactory)
                repo.patternLayout {
                    // Artifactory Ivy layout with 'ivys' subdirectory (e.g., com.artifactory/module/version/ivys/ivy-version.xml)
                    ivy '[organisation]/[module]/[revision]/ivys/ivy-[revision].xml'
                    artifact '[organisation]/[module]/[revision]/jars/[artifact]-[revision](-[classifier])(.[ext])'
                    artifact '[organisation]/[module]/[revision]/[type]s/[artifact]-[revision](-[classifier])(.[ext])'
                    
                    // Standard Ivy layout (e.g., com.artifactory/module/version/ivy-version.xml)
                    ivy '[organisation]/[module]/[revision]/ivy-[revision].xml'
                    artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier])(.[ext])'
                    
                    // Keep m2compatible = false to preserve dots in organization names
                    // If you need Maven-style paths (com/artifactory), repositories should use Maven layout instead
                    m2compatible = false
                }
            }
        }
    }
}
