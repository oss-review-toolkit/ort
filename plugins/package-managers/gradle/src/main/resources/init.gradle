/*
 * Copyright (C) 2017 The ORT Project Authors (see <https://github.com/oss-review-toolkit/ort/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import groovy.transform.ToString
import groovy.transform.TupleConstructor

import javax.inject.Inject

import org.gradle.api.internal.artifacts.DefaultProjectComponentIdentifier
import org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository
import org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository
import org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository
import org.gradle.tooling.provider.model.ToolingModelBuilder
import org.gradle.tooling.provider.model.ToolingModelBuilderRegistry

def maxMemInMib = Runtime.getRuntime().maxMemory() / (1024 * 1024)
logger.quiet("Gradle may use a maximum of $maxMemInMib MiB of memory.")

String.metaClass.isAtLeastVersion = { Integer major, Integer minor ->
    def digits = delegate.split('\\.')
    digits[0].toInteger() > major || (digits[0].toInteger() == major && digits[1].toInteger() >= minor)
}

// Apply one of the plugins defined below to register a custom model for the Tooling API. The plugin is required to get
// an instance of ToolingModelBuilderRegistry by dependency injection. Prior to Gradle version 2.14 (see [1]), the
// ToolingModelBuilderRegistry was project-scoped.
//
// [1] https://github.com/gradle/gradle/commit/e9e1b6029a056a5323311f7ee56b216cba6ede63
if (gradle.gradleVersion.isAtLeastVersion(2, 14)) {
    apply plugin: OrtDependencyTreeGradlePlugin
} else {
    apply plugin: OrtDependencyTreeProjectPlugin
}

// The following interfaces have to match those in "plugins/package-managers/gradle-model/src/main/kotlin/GradleModel.kt"
// because they are used to deserialize the model consumed there.

interface OrtDependencyTreeModel {
    String getGroup()
    String getName()
    String getVersion()
    List<OrtConfiguration> getConfigurations()
    List<String> getRepositories()
    List<String> getErrors()
    List<String> getWarnings()
}

interface OrtConfiguration {
    String getName()
    List<OrtDependency> getDependencies()
}

interface OrtDependency {
    String getGroupId()
    String getArtifactId()
    String getVersion()
    String getClassifier()
    String getExtension()
    List<OrtDependency> getDependencies()
    String getError()
    String getWarning()
    String getPomFile()
    String getLocalPath()
}

@ToString(includeNames = true)
@TupleConstructor
class OrtDependencyTreeModelImpl implements OrtDependencyTreeModel, Serializable {
    String group
    String name
    String version
    List<OrtConfiguration> configurations
    List<String> repositories
    List<String> errors
    List<String> warnings
}

@ToString(includeNames = true)
@TupleConstructor
class OrtConfigurationImpl implements OrtConfiguration, Serializable {
    String name
    List<OrtDependency> dependencies
}

@ToString(includeNames = true)
@TupleConstructor
class OrtDependencyImpl implements OrtDependency, Serializable {
    String groupId = ''
    String artifactId = ''
    String version = ''
    String classifier = ''
    String extension = ''
    List<OrtDependency> dependencies = []
    String error
    String warning
    String pomFile
    String localPath
}

class OrtDependencyTreeGradlePlugin extends AbstractOrtDependencyTreePlugin<Gradle> {
    @Inject
    OrtDependencyTreeGradlePlugin(ToolingModelBuilderRegistry registry) {
        super(registry)
    }
}

class OrtDependencyTreeProjectPlugin extends AbstractOrtDependencyTreePlugin<Project> {
    @Inject
    OrtDependencyTreeProjectPlugin(ToolingModelBuilderRegistry registry) {
        super(registry)
    }
}

class AbstractOrtDependencyTreePlugin<T> implements Plugin<T> {
    private final ToolingModelBuilderRegistry registry

    AbstractOrtDependencyTreePlugin(ToolingModelBuilderRegistry registry) {
        this.registry = registry
    }

    void apply(T t) {
        registry.register(new OrtDependencyTreeModelBuilder())
    }

    private static class OrtDependencyTreeModelBuilder implements ToolingModelBuilder {
        /**
         * Stores the OrtDependency objects created by this builder, so that they can be reused when the same
         * dependency is encountered again in the dependency graph. As dependencies can occur many times in large
         * dependency graphs, de-duplicating these objects can save a significant amount of memory.
         *
         * Note, however, that packages can be referenced in the graph multiple times with a different set of
         * dependencies. Therefore, for a package with a given identifier, there can be different OrtDependency
         * objects; hence the values of the map are lists.
         */
        private final Map<String, List<OrtDependency>> dependencies = new HashMap<>()

        /**
         * All root projects of included builds, mapped by included build name.
         */
        private final Map<String, Project> includedBuildsProjects = new HashMap<>()

        @Override
        boolean canBuild(String modelName) {
            return modelName == OrtDependencyTreeModel.name
        }

        @Override
        Object buildAll(String modelName, Project project) {
            List<String> errors = []
            List<String> warnings = []

            def gradleVersion = project.gradle.gradleVersion
            if (!gradleVersion.isAtLeastVersion(2, 14)) {
                def error = ("This project uses the unsupported Gradle version $gradleVersion. At least Gradle 2.14 " +
                        'is required.').toString()
                return new OrtDependencyTreeModelImpl(project.group.toString(), project.name, project.version.toString(),
                        [], [], [error], [])
            }

            project.gradle.getIncludedBuilds().each {
                project.logger.quiet("Processing included build '$it.name, $it.projectDir'.")
                // Since the projects of an included build are not present in the public API, the internal API is used
                // here. To prevent error with projects having a version of Gradle < 7.2.0, use reflection to make the
                // call.
                if (it.respondsTo("getTarget")) {
                    def state = it.getTarget()
                    state.ensureProjectsConfigured()
                    def build = state.getMutableModel()
                    def includedRootProject = build.rootProject.project
                    String identifier = toIdentifier(
                            includedRootProject.group.toString(),
                            includedRootProject.name,
                            includedRootProject.version.toString()
                    )
                    project.logger.quiet("Mapping included build '$it.name' to root project '$identifier'.")
                    includedBuildsProjects.put(it.name, includedRootProject)
                } else {
                    project.logger.warn("Cannot invoke 'getTarget' to fetch composite build information. " +
                            "This function requires Gradle >= 7.2.0.")
                }
            }

            List<OrtConfiguration> configurations = project.configurations.findResults { configuration ->
                if (canBeResolved(configuration)) {
                    ResolutionResult result = configuration.getIncoming().getResolutionResult()
                    Set<ResolvedArtifact> resolvedArtifacts = []

                    try {
                        resolvedArtifacts = configuration.resolvedConfiguration.lenientConfiguration
                                .getArtifacts(Specs.SATISFIES_ALL)
                    } catch (ResolveException e) {
                        project.logger.info("Artifacts for configuration '${configuration.name}' could not be " +
                                "resolved, therefore no information about artifact classifiers and extensions is " +
                                "available: ${collectCauses(e)}")
                    }

                    List<OrtDependency> dependencies = result.getRoot().getDependencies().findResults {
                        fetchDependency(it, project, resolvedArtifacts, [] as Set<String>)
                    }

                    new OrtConfigurationImpl(configuration.name, dependencies)
                } else {
                    project.logger.info("Configuration '${configuration.name}' cannot be resolved.")
                    null
                }
            }

            List<String> repositories = project.repositories.findResults {
                if (it instanceof DefaultMavenArtifactRepository) {
                    it.url.toString()
                } else if (it instanceof DefaultFlatDirArtifactRepository) {
                    warnings.add('Project uses a flat dir repository which is not supported by the analyzer. ' +
                            "Dependencies from this repository will be ignored: ${it.dirs}".toString())
                    null
                } else if (it instanceof DefaultIvyArtifactRepository) {
                    warnings.add('Project uses an Ivy repository which is not supported by the analyzer. ' +
                            "Dependencies from this repository will be ignored: ${it.url}".toString())
                    null
                } else {
                    errors.add("Unknown repository type: ${it.getClass().name}".toString())
                    null
                }
            }

            def version = project.version.toString()
            if (version == 'unspecified') version = ''
            return new OrtDependencyTreeModelImpl(project.group.toString(), project.name, version, configurations,
                    repositories, errors.unique(), warnings.unique())
        }

        /**
         * Returns an OrtDependency for the given DependencyResult. The function checks whether there is already an
         * OrtDependency instance in the cache compatible with the result. If this is not the case, parseDependency()
         * is called to generate a new instance.
         *
         * @param dependencyResult represents the package to be processed
         * @param project the current project
         * @param resolvedArtifacts the set of resolved artifacts
         * @param visited a set with dependency nodes already visited to detect cycles in the graph
         * @return the OrtDependency representing this result
         */
        private OrtDependency fetchDependency(DependencyResult dependencyResult, Project project,
                                           Set<ResolvedArtifact> resolvedArtifacts, Set<String> visited) {
            // Ignore version constraints, because they are not real dependencies but only document why a certain
            // version of their parent was chosen.
            if (dependencyResult.constraint) return null

            // Ignore this dependency if it is a BOM imported from Maven, because BOMs do not define dependencies but
            // version constraints.
            // See: https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import
            if (isBom(dependencyResult)) return null

            def dependencyId = identifierFor(dependencyResult, project)
            dependencies.putIfAbsent(dependencyId, [])
            def dependency = dependencies[dependencyId].find {
                dependencyTreeEquals(it, dependencyResult, project, [] as Set<String>)
            }

            if (dependency != null) {
                return dependency
            }

            dependency = parseDependency(dependencyResult, project, resolvedArtifacts, visited)
            dependencies[dependencyId].add(dependency)
            return dependency
        }

        /**
         * Return true if the provided DependencyResult represents an imported Maven BOM.
         */
        private static boolean isBom(DependencyResult dependencyResult) {
            if (dependencyResult instanceof ResolvedDependencyResult &&
                    dependencyResult.selected.hasProperty('variants')) {
                return dependencyResult.selected.variants.every {
                    def categoryAttribute = it.attributes.keySet().find { it.name == 'org.gradle.category' }
                    if (categoryAttribute != null) {
                        def value = it.attributes.getAttribute(categoryAttribute)
                        return value == 'platform' || value == 'enforced-platform'
                    }

                    false
                }
            }

            return false
        }

        /**
         * Creates a new OrtDependency object to represent the given DependencyResult. The different types of
         * dependencies are evaluated. The (transitive) dependencies of this dependency are processed recursively.
         *
         * @param dependencyResult represents the package to be processed
         * @param project the current project
         * @param resolvedArtifacts the set of resolved artifacts
         * @param parents a set with dependency nodes already visited to detect cycles in the graph
         * @return the newly created OrtDependency
         */
        private OrtDependency parseDependency(DependencyResult dependencyResult, Project project,
                                           Set<ResolvedArtifact> resolvedArtifacts, Set<String> parents) {
            if (dependencyResult instanceof ResolvedDependencyResult) {
                List<OrtDependency> dependencies = dependencyResult.selected.dependencies.findResults { dependency ->
                    // Do not follow constraints, because they are not real dependencies but only document why a certain
                    // version of their parent was chosen.
                    // Do not follow circular dependencies, these can exist for project dependencies.
                    if (!dependencyResult.constraint && !(dependencyResult.requested.displayName in parents)) {
                        fetchDependency(dependency, project, resolvedArtifacts,
                                parents + dependencyResult.requested.displayName)
                    } else {
                        null
                    }
                }

                ComponentIdentifier id = dependencyResult.selected.id
                if (id instanceof ModuleComponentIdentifier) {
                    def resolvedComponents = project.dependencies.createArtifactResolutionQuery()
                            .forComponents(id)
                            .withArtifacts(MavenModule, MavenPomArtifact)
                            .execute()
                            .resolvedComponents

                    // Imitate Kotlin's "firstOrNull()".
                    def result = resolvedComponents?.find { true }?.getArtifacts(MavenPomArtifact)?.find { true }

                    String error = null
                    String warning = null
                    String pomFile = null

                    if (result instanceof ResolvedArtifactResult) {
                        pomFile = result.file.absolutePath
                    } else if (result instanceof UnresolvedArtifactResult) {
                        error = collectCauses(result.failure).toString()
                    } else if (result == null) {
                        error = 'Resolution did not return any artifacts'
                    } else {
                        error = "Unknown ArtifactResult type: ${result.getClass().name}".toString()
                    }

                    def artifact = resolvedArtifacts.find {
                        // Accept JVM variants for multi-platform artifacts.
                        def hasMatchingName = it.owner.id.name in [id.module, "${id.module}-jvm".toString()]

                        // Cannot use instanceof because the classes below do not exist in all Gradle versions.
                        if (it.owner.getClass().name == 'org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier') {
                            id.group == it.owner.id.group && hasMatchingName && id.version == it.owner.version
                        } else if (it.owner.getClass().name == 'org.gradle.api.internal.artifacts.ivyservice.dynamicversions.DefaultResolvedModuleVersion') {
                            id.group == it.owner.id.group && hasMatchingName && id.version == it.owner.id.version
                        } else {
                            error = "Unknown artifact owner type: ${it.owner.getClass().name}".toString()
                            false
                        }
                    }

                    def classifier = artifact?.classifier ?: ''
                    def extension = artifact?.extension ?: ''

                    return new OrtDependencyImpl(id.group, id.module, id.version, classifier, extension, dependencies,
                            error, warning, pomFile, null)
                } else if (id instanceof ProjectComponentIdentifier) {
                    if (id.build.isCurrentBuild() || !project.gradle.gradleVersion.isAtLeastVersion(7, 2)) {
                        def dependencyProject = project.rootProject.findProject(id.projectPath)
                        return new OrtDependencyImpl(groupId: dependencyProject.group.toString(),
                                artifactId: dependencyProject.name, version: dependencyProject.version.toString(),
                                dependencies: dependencies, localPath: dependencyProject.projectDir.absolutePath)
                    } else {
                        project.logger.quiet("Project '$id' is not part of current build. Assuming included build.")

                        def includedProject = findRootProjectOfIncludedBuild(project, id)
                        def dependencyProject = id.projectPath == ":" ? includedProject
                                : includedProject.findProject(id.projectName)

                        return new OrtDependencyImpl(groupId: dependencyProject.group.toString(),
                                artifactId: dependencyProject.name, version: dependencyProject.version.toString(),
                                dependencies: dependencies, localPath: dependencyProject.projectDir.absolutePath)
                    }
                } else {
                    return dependencyFromDisplayName(id.displayName, dependencies,
                            "Unknown id type: ${id.getClass().simpleName}", null)
                }
            } else if (dependencyResult instanceof UnresolvedDependencyResult) {
                return dependencyFromDisplayName(dependencyResult.attempted.displayName, [],
                        "Unresolved: ${collectCauses(dependencyResult.failure)}", null)
            } else {
                return dependencyFromDisplayName(dependencyResult.requested.displayName, [],
                        "Unknown result type: ${dependencyResult.getClass().simpleName}", null)
            }
        }

        private static boolean canBeResolved(Configuration configuration) {
            // The canBeResolved property is available since Gradle 3.3.
            boolean canBeResolved = !configuration.hasProperty('canBeResolved') || configuration.canBeResolved

            // The function getResolutionAlternatives() which belongs to the DeprecatableConfiguration class is
            // available since Gradle 6.0.
            boolean isDeprecatedForResolving = false
            if (configuration.metaClass.respondsTo(configuration, 'getResolutionAlternatives')) {
                isDeprecatedForResolving = configuration.getResolutionAlternatives() != null
            }

            return canBeResolved && !isDeprecatedForResolving
        }

        private static String collectCauses(Throwable throwable) {
            def result = "${throwable.getClass().simpleName}: ${throwable.message}"
            def cause = throwable.cause
            while (cause != null) {
                result += "\nCaused by: ${cause.getClass().simpleName}: ${cause.message}"
                cause = cause.cause
            }
            return result
        }

        /**
         * Checks whether the given dependency and the dependency result spawn the same dependency trees. This is
         * used to test whether the dependency result can be represented by this dependency.
         *
         * @param dependency the dependency
         * @param dependencyResult the dependency result
         * @param project the current project
         * @param visited stores the name of already visited dependencies to deal with cycles
         * @return a flag whether the dependency trees are equal
         */
        private boolean dependencyTreeEquals(OrtDependency dependency, DependencyResult dependencyResult,
                                                    Project project, Set<String> visited) {
            def displayName = dependencyResult.requested.displayName
            if (displayName in visited) {
                return true  // We visited this node already.
            }

            def resultDependencies = dependencyResult instanceof ResolvedDependencyResult ?
                    dependencyResult.selected.dependencies : [] as Set<DependencyResult>
            // Ignore constraints and BOM dependencies for calculating the count since they are skipped by
            // `fetchDependency`.
            if (dependency.dependencies.size() != resultDependencies.count { !it.constraint && !isBom(it) }) {
                return false
            }

            def dependencyMap = dependency.dependencies.collectEntries { [identifierFor(it), it] }
            def resultMap = resultDependencies.collectEntries { [identifierFor(it, project), it] }
            def nextVisited = visited + displayName

            return dependencyMap.every { entry ->
                def matchingResult = resultMap[entry.key]
                matchingResult != null && dependencyTreeEquals(entry.value as OrtDependency,
                        matchingResult as DependencyResult, project, nextVisited)
            }
        }

        /**
         * Generates a unique string identifier for a DependencyResult. This is used to de-duplicate dependencies.
         *
         * @param dependencyResult the dependency result
         * @param project the current project
         * @return a unique identifier for this dependency
         */
        private String identifierFor(DependencyResult dependencyResult, Project project) {
            if (dependencyResult instanceof ResolvedDependencyResult) {
                ComponentIdentifier id = dependencyResult.selected.id
                if (id instanceof ModuleComponentIdentifier) {
                    return toIdentifier(id.group, id.module, id.version)
                } else if (id instanceof ProjectComponentIdentifier) {
                    if (id.build.currentBuild || !project.gradle.gradleVersion.isAtLeastVersion(7, 2)) {
                        def dependencyProject = project.rootProject.findProject(id.projectPath)
                        return toIdentifier(dependencyProject.group.toString(), dependencyProject.name,
                                dependencyProject.version.toString())
                    } else {
                        project.logger.quiet("Project '$id' is not part of current build. Assuming included build.")
                        def includedProject = findRootProjectOfIncludedBuild(project, id)
                        def dependencyProject = id.projectPath == ":" ? includedProject
                                : includedProject.findProject(id.projectName)

                        // Here 'identifierFromDisplayName' cannot be used because it is in the context of the included
                        // build.
                        def identifier = toIdentifier(
                                dependencyProject.group.toString(),
                                dependencyProject.name,
                                dependencyProject.version.toString()
                        )
                        project.logger.quiet("Using identifier '$identifier' for included project.")
                        return identifier
                    }
                } else {
                    return identifierFromDisplayName(id.displayName)
                }
            }

            if (dependencyResult instanceof UnresolvedDependencyResult) {
                return identifierFromDisplayName(dependencyResult.attempted.displayName)
            }

            return identifierFromDisplayName(dependencyResult.requested.displayName)
        }

        /**
         * Find the root project of an included build. The latter is identified by the given Identifier of an included
         * project.
         * @param project the original project for which the dependency tree is built. Used only for logging purposes
         * @param identifier the identifier of an included project
         * @return the root project of the build of the included project
         */
        private Project findRootProjectOfIncludedBuild(Project project, ProjectComponentIdentifier identifier) {
            // One again the Gradle's internal API is used to access the identity path of the project, which is not
            // exposed in the 'ProjectComponentIdentifier' interface. This identity path is the path of the project
            // prefixed by the name of the included build e.g. ':includedBuild:subproject'.
            def identityPath = (identifier as DefaultProjectComponentIdentifier).identityPath
            project.logger.quiet("Searching root project for identity path '$identityPath'.")
            def pathFragments = identityPath.path.split(":")
            if (pathFragments[0].isEmpty()) {
                pathFragments = pathFragments.drop(1) // There is always a first ':' so it can be removed.
            }

            def includedRootProject = includedBuildsProjects[pathFragments[0]]
            if (includedRootProject == null) {
                throw new IllegalStateException("No included root project '${pathFragments[0]}' found.")
            }

            return includedRootProject
        }

        /**
         * Generates a unique identifier for the given OrtDependency.
         *
         * @param dependency the OrtDependency
         * @return the identifier for this OrtDependency
         */
        private static String identifierFor(OrtDependency dependency) {
            return toIdentifier(dependency.groupId, dependency.artifactId, dependency.version)
        }

        /**
         * Creates an object to represent the dependency identified by the given display name. This function is
         * called if no valid dependency identifier is available. It therefore tries to extract the coordinates of
         * the dependency from the display name.
         *
         * @param displayName the display name
         * @param dependencies the list of dependencies of the package affected
         * @param error an optional error message
         * @param warning an optional warning message
         * @return the newly created dependency representation
         */
        private static OrtDependencyImpl dependencyFromDisplayName(String displayName, List<OrtDependency> dependencies,
                                                        String error, String warning) {
            def coordinates = displayNameToCoordinates(displayName)
            return new OrtDependencyImpl(groupId: coordinates[0], artifactId: coordinates[1], version: coordinates[2],
                    dependencies: dependencies, error: error?.toString(), warning: warning?.toString())
        }

        /**
         * Generates a unique string identifier from a display name. The display name is converted to coordinates,
         * from which the identifier can be constructed.
         *
         * @param displayName the display name
         * @return a unique identifier for this display name
         */
        private static String identifierFromDisplayName(String displayName) {
            def coordinates = displayNameToCoordinates(displayName)
            return toIdentifier(coordinates[0], coordinates[1], coordinates[2])
        }

        /**
         * Splits a display name for a component to an array of groupId, artifactId, and version.
         *
         * @param displayName the name to split
         * @return the array with the coordinates (always 3 components)
         */
        private static String[] displayNameToCoordinates(String displayName) {
            def coordinates = displayName.split(':')

            if (displayName.startsWith('project :')) {
                return ['<project>', coordinates.tail().join('/'), '']
            }

            if (coordinates.length == 3) {
                return coordinates
            }

            return ['<unknown>', displayName.replace(':', '_'), '']
        }

        /**
         * Generate a unique identifier for the component with the given coordinates.
         *
         * @param group the group
         * @param artifact the artifact
         * @param version the version
         * @return the identifier for these coordinates
         */
        private static String toIdentifier(String group, String artifact, String version) {
            return "$group:$artifact:$version"
        }
    }
}
