/*
 * Copyright (C) 2025 The ORT Project Authors (see <https://github.com/oss-review-toolkit/ort/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.ossreviewtoolkit.plugins.reporters.ortresultschema

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.jsonSchema.JsonSchemaGenerator

import java.io.File

import org.ossreviewtoolkit.model.OrtResult
import org.ossreviewtoolkit.plugins.api.OrtPlugin
import org.ossreviewtoolkit.plugins.api.PluginDescriptor
import org.ossreviewtoolkit.reporter.Reporter
import org.ossreviewtoolkit.reporter.ReporterFactory
import org.ossreviewtoolkit.reporter.ReporterInput

@OrtPlugin(
    id = "OrtResultSchema",
    displayName = "ORT result JSON schema",
    description = "A reporter to serialize the JSON schema for ORT result files.",
    factory = ReporterFactory::class
)
class OrtResultSchemaReporter(
    override val descriptor: PluginDescriptor = OrtResultSchemaReporterFactory.descriptor
) : Reporter {
    private val nullableRuns = setOf("analyzer", "scanner", "advisor", "evaluator")

    override fun generateReport(input: ReporterInput, outputDir: File): List<Result<File>> {
        val mapper = ObjectMapper()
        val generator = JsonSchemaGenerator(mapper)

        val schemeFileResult = runCatching {
            val schema = generator.generateSchema(OrtResult::class.java)

            outputDir.resolve("ort-result-schema.json").also { schemaFile ->
                val schemaJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(schema)

                // Fixup the V3 schema generated by Jackson to be V4 validatable.
                val finalSchemaJson = nullableRuns.fold(schemaJson) { updatedSchemaJson, tool ->
                    updatedSchemaJson.replace(
                        """
                        |    "$tool" : {
                        |      "type" : "object",
                        """.trimMargin(),
                        """
                        |    "$tool" : {
                        |      "type" : ["object", "null"],
                        """.trimMargin()
                    )
                }

                schemaFile.writeText(finalSchemaJson)
            }
        }

        return listOf(schemeFileResult)
    }
}
