[#--
Copyright (C) 2020 HERE Europe B.V.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
License-Filename: LICENSE
--]
[#--
The notice file generated by this template consists of the following sections:

* The licenses and associated copyrights for all projects merged into a single list.
* The archived license files, licenses and associated copyrights for dependencies listed by package.

Excluded projects and packages are ignored.
--]
[#-- Add the licenses of the projects. --]
[#assign isFirst = true]
[#--
Merge the licenses and copyrights of all projects into a single list. The default LicenseView.ALL is used because
projects cannot have a concluded license (compare with the handling of packages below). Also filter all licenses that
are configured not to be included in notice files.
--]
[#assign mergedLicenses = helper.filterForCategory(helper.mergeLicenses(projects), "include-in-notice-file")]
[#list mergedLicenses as resolvedLicense]
[#assign licenseText = licenseTextProvider.getLicenseText(resolvedLicense.license.simpleLicense())!""]
[#if licenseText?has_content]
[#if isFirst]
This software includes external packages and source code.
The applicable license information is listed below:

----
[#assign isFirst = false]
[#else]
  --
[/#if]
[#assign copyrights = resolvedLicense.getCopyrights(true)]
[#list copyrights as copyright]
[#if copyright?is_first]

[/#if]
${copyright}
[/#list]

${licenseText}
[#assign exceptionText = licenseTextProvider.getLicenseText(resolvedLicense.license.exception()!"")!""]
[#if exceptionText?has_content]
${exceptionText}
[/#if]
[/#if]
[/#list]
[#-- Add the licenses of all dependencies. --]
[#if packages?has_content]
----

This software depends on external packages and source code.
The applicable license information is listed below:
[/#if]

[#list packages as package]
[#if !package.excluded]
----

Package: [#if package.id.namespace?has_content]${package.id.namespace}:[/#if]${package.id.name}:${package.id.version}
[#-- List the content of archived license files and associated copyrights. --]
[#list package.licenseFiles.files as licenseFile]

This package contains the file ${licenseFile.path} with the following contents:

${licenseFile.readFile()}
[#assign copyrights = licenseFile.getCopyrights()]
[#if copyrights?has_content]
The following copyright holder information relates to the license(s) above:

[#list copyrights as copyright]
${copyright}
[/#list]
[/#if]
[/#list]
[#--
Filter the licenses of the package using LicenseView.CONCLUDED_OR_DECLARED_AND_DETECTED. This is the default view which
ignores declared and detected licenses if a license conclusion for the package was made. If copyrights were detected
for a concluded license those statements are kept. Also filter all licenses that are configured not to be included in
notice files, and filter all licenses that are contained in the license files already printed above.
--]
[#assign
resolvedLicenses = helper.filterForCategory(
    LicenseView.CONCLUDED_OR_DECLARED_AND_DETECTED.filter(package.licensesNotInLicenseFiles()),
    "include-in-notice-file"
)]
[#assign isFirst = true]
[#list resolvedLicenses as resolvedLicense]
[#assign licenseText = licenseTextProvider.getLicenseText(resolvedLicense.license.simpleLicense())!""]
[#if licenseText?has_content]
[#if isFirst]

The following copyrights and licenses were found in the source code of this package:
[#assign isFirst = false]
[#else]
  --
[/#if]
[#assign copyrights = resolvedLicense.getCopyrights(true)]
[#list copyrights as copyright]
[#if copyright?is_first]

[/#if]
${copyright}
[/#list]

${licenseText}
[#assign exceptionText = licenseTextProvider.getLicenseText(resolvedLicense.license.exception()!"")!""]
[#if exceptionText?has_content]
${exceptionText}
[/#if]
[/#if]
[/#list]
[/#if]
[/#list]
